/**
 * @file aes.hpp
 * @author JoaoAJMatos
 * @date 2023-06-30
 * 
 * @brief This file contains the implementation for the AES encryption
 *        standard following the FIPS-197 specification.
 * 
 *        The original implementation was written by kkAyataka (github.com/kkAyataka)
 *        and can be found at https://www.github.com/kkAyataka/plusaes licensed under
 *        the Boost Software License V.1.0.
 * 
 *        Other license formats can be used if needed. Check the end of the file for
 *        more information.
 *
 * @copyright Copyright (c) 2023
 */

// TODO: Add support for CFB and OFB

#ifndef CRYPTO_AES_HPP
#define CRYPTO_AES_HPP

/** C++ Includes */
#include <vector>
#include <bitset>

/** Skynet Includes */
#include <types.hpp>

namespace crypto::aes
{
      constexpr int WORD_SIZE  = 4;
      constexpr int BLOCK_SIZE = 4;
      constexpr int STATE_SIZE = 16; /* word * block size */
      constexpr int BLOCK_BIT_SIZE = 128;
      constexpr int BLOCK_BYTE_SIZE = BLOCK_BIT_SIZE / 8;

      using iv = byte[BLOCK_BYTE_SIZE];
      using Key = byte*;

      /** AES Cipher Modes */
      enum class Mode {
            ECB,        /** Eletronic Code Book */
            CBC,        /** Cipher Block Chaining */
            GCM,        /** Galois/Counter Mode */
            CTR,        /** Counter */
            /** CFB and OFB not supported as of now */
      };

      /** AES Key Sizes */
      enum class KeySize {
            AES_128 = 16,
            AES_192 = 24,
            AES_256 = 32
      };

      /**
       * @brief Encrypts data using the AES encryption standard.
       * 
       * @details Various modes of operation are supported and can be
       *          selected using the template parameter.
       * 
       * 
       * @return true If the encryption was successful, false otherwise
       */
      template <Mode>
      bool Encrypt(byte *data, const std::size_t size, const Key &key, const iv &iv);

      /**
       * @brief Decrypts data using the AES encryption standard.
       * 
       * @details Various modes of operation are supported and can be
       *          selected using the template parameter.
       * 
       * 
       * @return true If the decryption was successful, false otherwise
       */
      template <Mode>
      bool Decrypt(byte *data, const std::size_t size, const Key &key, const iv &iv);

      /**
       * @brief Generates a random key for the AES encryption standard.
       *
       * @return Key The generated key
       */
      template <int KeySize>
      Key* GenerateKey();

      /**
       * @brief Derives an AES key from a password and a salt.
       * 
       * @param password The password to derive the key from
       * @param salt The salt to derive the key from
       */
      Key* DeriveKeyFromPassword(const std::string &password, const std::string &salt);

} // namespace crypto

#endif // CRYPTO_AES_HPP


////////////////////////////////////////////////////////////////////////////////
// LICENSE OPTION 1:
////////////////////////////////////////////////////////////////////////////////
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
// LICENSE OPTION 2:
////////////////////////////////////////////////////////////////////////////////
// MIT License
// 
// Copyright (c) 2023 Jo√£o Matos
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
